# Generated by Django 5.2.1 on 2025-06-01 13:19

import django.db.models.deletion
from django.db import migrations, models


# --- FUNCIÓN PARA LIMPIAR DATOS ---
def convert_empty_fabricante_char_to_null(apps, schema_editor):
    Insumo = apps.get_model("App_LUMINOVA", "Insumo")
    db_alias = schema_editor.connection.alias

    # En este punto, 'fabricante' en la base de datos todavía es un CharField.
    # Necesitamos que este CharField pueda ser NULL para poder asignarle None.
    # Si el CharField original no era nullable, esta operación podría fallar
    # si Django no lo hizo nullable primero en una operación AlterField implícita
    # o en una migración anterior explícita.

    # La migración AlterField previa (PASO 1 de mi respuesta anterior) es ideal para esto.
    # Asumiremos que el CharField ya es o se acaba de hacer nullable antes de este RunPython.

    updated_count = 0
    for insumo in Insumo.objects.using(db_alias).all():
        # Solo actuar sobre el campo si es un string (así no tocamos los que ya son None o FKs válidos de migraciones anteriores)
        if isinstance(insumo.fabricante, str) and insumo.fabricante == "":
            insumo.fabricante = None
            insumo.save(update_fields=["fabricante"])
            updated_count += 1
    if updated_count > 0:
        print(
            f"\n   Converted {updated_count} empty string(s) in Insumo.fabricante to NULL."
        )


def revert_conversion(apps, schema_editor):
    # Si reviertes, podrías querer volver a poner '' si el CharField original no permitía NULL,
    # pero generalmente no es necesario para este tipo de limpieza.
    pass


class Migration(migrations.Migration):

    dependencies = [
        (
            "App_LUMINOVA",
            "0011_alter_ordenventa_estado",
        ),  # Asegúrate que esta es tu migración anterior correcta
    ]

    operations = [
        # PASO 1 (Opcional pero MUY RECOMENDADO si el CharField 'fabricante' original NO era null=True):
        # Primero, nos aseguramos de que la columna CharField 'fabricante' pueda aceptar NULL.
        # Si tu CharField 'fabricante' en el modelo *antes* de cambiarlo a ForeignKey
        # no tenía null=True, esta operación es necesaria.
        # Si ya era null=True, puedes omitir esta operación de AlterField.
        migrations.AlterField(
            model_name="insumo",
            name="fabricante",  # Aún se refiere al CharField en la base de datos en este punto
            field=models.CharField(
                max_length=100, blank=True, null=True
            ),  # Habilita null para el CharField
            preserve_default=False,  # Importante al cambiar a nullable
        ),
        # PASO 2: Ejecutar la función para convertir las cadenas vacías a None
        migrations.RunPython(
            convert_empty_fabricante_char_to_null, reverse_code=revert_conversion
        ),
        # PASO 3: Ahora sí, alterar el campo para que sea un ForeignKey.
        # Como los '' ya son NULL y el FK permite NULL, esto debería funcionar.
        migrations.AlterField(
            model_name="insumo",
            name="fabricante",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="insumos_fabricados",
                to="App_LUMINOVA.fabricante",
            ),
        ),
    ]
